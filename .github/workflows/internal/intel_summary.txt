Intel Xeon Platinum 8488C (Sapphire Rapids) - Performance Summary
====================================================================

Test Date: 2025-10-15
Instance: AWS EC2 c7i.xlarge equivalent
OS: Ubuntu 22.04 LTS
Rust: 1.83.0 (release, target-cpu=native)

Hardware Specifications
-----------------------
CPU: Intel Xeon Platinum 8488C
Architecture: Sapphire Rapids (Golden Cove cores)
Cores Tested: 2 @ 3.2-3.6 GHz (variable, turbo boost)
L1 Cache: 32KB per core
L2 Cache: 2MB per core
L3 Cache: 105MB (shared) ← MASSIVE!
Memory: DDR5 (120+ GB/s bandwidth)
Features: BMI2, AVX2, AVX-512 (full suite), AMX

Performance Results
-------------------

Morton Operations (3D Z-order curve):
  - Encode: 249M ops/sec (4.01 ns) [BMI2 PDEP]
  - Decode: 424M ops/sec (2.36 ns) [BMI2 PEXT]

Index64 Batch Operations:
  - Encode: 206M elem/sec (4.87 ns) [AVX2]
  - Decode: 172M elem/sec (5.81 ns) [AVX2 + Morton]

Batch Neighbor Calculation (14 neighbors, BCC lattice):
  - Small (100 routes):  30.2M routes/sec (33.2 ns)
  - Medium (1K routes):  45.8M routes/sec (21.8 ns)
  - Large (10K routes):  37.8M routes/sec (26.4 ns) ← CACHE WIN!

Distance Calculations:
  - Manhattan:    1.19B ops/sec (0.84 ns) [Integer ALU]
  - Euclidean²:   1.15B ops/sec (0.87 ns) [Integer ALU + AVX2]

Route Validation (BCC parity):
  - Throughput: 1.95B ops/sec (0.51 ns)

Intel vs AMD Comparison
-----------------------

Category              | Intel 8488C  | AMD 7R13     | Winner | Advantage
----------------------|--------------|--------------|--------|----------
Morton Encode         | 249M/s       | 391M/s       | AMD    | 1.57x
Morton Decode         | 424M/s       | 505M/s       | AMD    | 1.19x
Index64 Batch Encode  | 206M/s       | 175M/s       | Intel  | 1.18x
Neighbors (Small)     | 30.2M/s      | 32.1M/s      | AMD    | 1.06x
Neighbors (Medium)    | 45.8M/s      | 47.7M/s      | AMD    | 1.04x
Neighbors (Large)     | 37.8M/s      | 6.5M/s       | Intel  | 5.82x !!!
Manhattan Distance    | 1.19B/s      | 1.19B/s      | Tie    | 1.00x
Route Validation      | 1.95B/s      | 2.08B/s      | AMD    | 1.07x

Key Insights
------------

1. INTEL DOMINATES LARGE BATCHES (>10K elements)
   - 105MB L3 cache vs AMD's 64MB = 5.82x advantage on neighbor calc
   - DDR5 memory provides 1.18x better throughput on batch operations
   - Cache hierarchy is Intel's secret weapon

2. AMD WINS SINGLE-THREADED OPERATIONS
   - Sustained 3.6 GHz clock beats Intel's variable 3.2-3.6 GHz
   - 1.57x faster Morton encode, 1.19x faster decode
   - Better for latency-sensitive workloads

3. BMI2 PERFORMANCE
   - Both CPUs have hardware PDEP/PEXT instructions
   - Intel's BMI2: 424M decode ops/sec (2.70x faster than Apple's LUT)
   - AMD's BMI2: 505M decode ops/sec (3.22x faster than Apple's LUT)
   - AMD's higher clock gives it the edge on BMI2

4. AVX-512 UNTAPPED POTENTIAL
   - Intel has full AVX-512 support (ZMM registers, 512-bit)
   - Current code only uses AVX2 (256-bit)
   - Potential 2x speedup on batch operations if AVX-512 is implemented
   - Recommendation: Add AVX-512 code paths with runtime detection

5. CACHE IS EVERYTHING FOR LARGE WORKLOADS
   - Intel's 105MB L3 keeps 10K routes in cache
   - AMD's 64MB causes cache thrashing + Rayon overhead
   - For >10K element batches, Intel's cache advantage is decisive

Intel Strengths
---------------
✅ Large batch processing (>10K elements) - 5.82x faster than AMD
✅ Massive 105MB L3 cache - keeps working sets resident
✅ DDR5 memory bandwidth - 1.18x better on batch operations
✅ AVX-512 potential - untapped 2x speedup available
✅ Consistent large-scale performance - cache prevents thrashing

Intel Weaknesses
----------------
❌ Morton operations - 1.57x slower than AMD on encode
❌ Variable clock speed - 3.2-3.6 GHz hurts single-thread consistency
❌ Single-threaded latency - AMD's fixed 3.6 GHz wins
❌ Cost - typically more expensive than AMD on cloud (~$0.17/hr vs $0.15/hr)

Recommendations
---------------

CHOOSE INTEL XEON WHEN:
  ✅ Processing very large batches (>50K elements)
  ✅ Memory bandwidth critical (DDR5 advantage)
  ✅ Workload benefits from large cache (>64MB working set)
  ✅ Future AVX-512 optimization planned
  ✅ Enterprise support and predictability important

CHOOSE AMD EPYC WHEN:
  ✅ Cost-sensitive cloud deployment
  ✅ Small-medium batches (<10K elements)
  ✅ Latency-sensitive single-threaded workloads
  ✅ Morton operations are primary workload

CHOOSE APPLE M2 WHEN:
  ✅ macOS development/deployment
  ✅ Consistent performance required
  ✅ Energy efficiency matters
  ✅ Medium-large batches (1K-50K)

Cloud Instance Recommendations (AWS EC2)
----------------------------------------

General Purpose:    c6a.xlarge (AMD) @ $0.154/hr  ← Best value
Large Batches:      c7i.xlarge (Intel) @ $0.17/hr ← Best performance >10K
Small/Latency:      c6a.large (AMD) @ $0.077/hr   ← Cheapest + fast
Development:        c7g.xlarge (Graviton3) @ $0.145/hr ← ARM like Apple

Future Optimization Opportunities
----------------------------------

1. AVX-512 Implementation (HIGH PRIORITY)
   - Intel has full AVX-512 support (not currently used)
   - Potential 2x speedup on batch operations
   - Should add runtime detection and AVX-512 code paths

2. Cache-Aware Tuning
   - Leverage 105MB L3 for even larger batches
   - Optimize blocking sizes for Intel cache hierarchy
   - Could push large batch performance even higher

3. DDR5 Optimization
   - Intel has DDR5 bandwidth advantage
   - Optimize memory access patterns for DDR5
   - Use prefetching more aggressively

4. Turbo Boost Awareness
   - Intel's variable 3.2-3.6 GHz affects consistency
   - Could detect and optimize for sustained vs burst workloads
   - Pin to performance governor for consistency

Technical Notes
---------------

Build Flags:
  RUSTFLAGS="-C target-cpu=native"
  Features: parallel

Detected CPU Features:
  ✅ BMI2 (PDEP/PEXT)
  ✅ AVX2 (256-bit SIMD)
  ✅ AVX-512F, AVX-512DQ, AVX-512BW, AVX-512VL (512-bit SIMD)
  ✅ AMX (Advanced Matrix Extensions)
  ✅ FMA (Fused Multiply-Add)

Disk Cleanup Performed:
  - Removed 5.6 GB NVIDIA/CUDA packages (not needed on CPU-only instance)
  - Removed 612 MB X11/graphics dependencies
  - Disk usage: 97% → 42% free

Git Status:
  Branch: intel-cpu-results
  Committed: docs/CPU_COMPARISON.md
  Committed: .github/workflows/internal/intel_summary.txt
  Status: Ready to push (requires authentication)

---
Testing completed: 2025-10-15
Platform: Intel Xeon Platinum 8488C (Sapphire Rapids)
Library: OctaIndex3D v0.3.2

[package]
name = "octaindex3d"
version = "0.4.2"
edition = "2021"
rust-version = "1.77"
authors = ["Michael A. McLarney"]
description = "3D Spatial Indexing and Routing System based on BCC lattice with truncated octahedral cells"
license = "MIT"
repository = "https://github.com/FunKite/OctaIndex3D"
keywords = ["spatial", "3d", "indexing", "routing", "bcc-lattice"]
categories = ["algorithms", "data-structures", "science"]
build = "build.rs"
exclude = [
    "RELEASE_*.md",
    "WHITEPAPER.md",
    "PERFORMANCE.md",
    "OPTIMIZATION_GUIDE.md",
    "TIER1_OPTIMIZATIONS.md",
    "docs/",
    ".github/workflows/internal/*",
]

[[bin]]
name = "octaindex3d"
path = "src/bin/octaindex3d-cli.rs"
required-features = ["cli"]

[[example]]
name = "verify_index64_hilbert64"
required-features = ["hilbert"]

[dependencies]
# Compression (LZ4 is default)
lz4_flex = "0.11"
zstd = { version = "0.13", optional = true }

# Serialization
serde = { version = "1.0", features = ["derive"], optional = true }
serde_json = { version = "1.0", optional = true }
serde_cbor = { version = "0.11", optional = true }

# Bech32m encoding
bech32 = "0.11"

# Zero-copy support
bytemuck = { version = "1.14", features = ["derive"] }
zerocopy = { version = "0.7", features = ["derive"], optional = true }
rkyv = { version = "0.8", optional = true }

# Pathfinding
petgraph = { version = "0.8", optional = true }

# Synchronization
once_cell = "1.19"
parking_lot = "0.12"

# Error handling
thiserror = "2.0"

# Math
num-traits = "0.2"
ordered-float = "5.1"
glam = { version = "0.29", optional = true }

# CRC for container integrity
crc32fast = "1.4"

# SHA256 for container v2
sha2 = { version = "0.10", optional = true }

# Data structures for legacy modules
ahash = "0.8"
rustc-hash = "2.0"

# CLI
clap = { version = "4.5", features = ["derive"], optional = true }
rand = { version = "0.8", optional = true }
crossterm = { version = "0.28", optional = true }
dirs = { version = "6.0", optional = true }

# Performance: Parallel processing
rayon = { version = "1.10", optional = true }

# Performance: GPU acceleration
pollster = { version = "0.3", optional = true }

# Performance: Advanced memory
aligned-vec = { version = "0.6", optional = true }

# Platform-specific GPU dependencies
[target.'cfg(target_os = "macos")'.dependencies]
metal = { version = "0.29", optional = true }

[target.'cfg(not(target_os = "windows"))'.dependencies]
wgpu = { version = "22.0", optional = true }
cudarc = { version = "0.12", features = ["cuda-12050"], optional = true }

[[bench]]
name = "core_operations"
harness = false

[[bench]]
name = "performance_optimizations"
harness = false

[[bench]]
name = "tier1_optimizations"
harness = false

[[bench]]
name = "simd_batch_optimizations"
harness = false

[dev-dependencies]
proptest = "1.9"
criterion = { version = "0.7", features = ["html_reports"] }
approx = "0.5"
rand = "0.8"

[features]
default = ["serde", "lz4", "simd", "parallel"]
lz4 = []
zstd = ["dep:zstd"]
serde = ["dep:serde", "dep:serde_json", "dep:serde_cbor"]
pathfinding = ["dep:petgraph"]
zerocopy_support = ["dep:zerocopy"]
rkyv = ["dep:rkyv"]
simd = []
parallel = ["dep:rayon"]
gpu = ["gpu-metal"]
gpu-metal = ["dep:metal", "dep:pollster"]
gpu-vulkan = ["dep:wgpu", "dep:pollster"]
gpu-cuda = ["dep:cudarc"]
gpu-rocm = []
memory-aligned = ["dep:aligned-vec"]
hilbert = []
container_v2 = ["dep:sha2"]
gis_geojson = ["serde", "dep:glam"]
cli = ["dep:clap", "dep:rand", "dep:crossterm", "dep:dirs", "serde"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1

[profile.bench]
opt-level = 3
lto = true
